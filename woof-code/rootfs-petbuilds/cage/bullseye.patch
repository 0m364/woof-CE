diff -rup wlroots-0.14.0-orig/meson.build wlroots-0.14.0/meson.build
--- wlroots-0.14.0-orig/meson.build	2021-06-23 21:11:00.576321097 +0300
+++ wlroots-0.14.0/meson.build	2021-06-23 22:04:12.005159463 +0300
@@ -94,9 +94,9 @@ internal_features = {
 	'xcb-errors': false,
 }
 
-wayland_server = dependency('wayland-server', version: '>=1.19')
+wayland_server = dependency('wayland-server', version: '>=1.18')
 wayland_client = dependency('wayland-client')
-drm = dependency('libdrm', version: '>=2.4.105')
+drm = dependency('libdrm', version: '>=2.4.104')
 gbm = dependency('gbm', version: '>=17.1.0')
 libinput = dependency('libinput', version: '>=1.14.0')
 xkbcommon = dependency('xkbcommon')
Only in wlroots-0.14.0: meson.build.orig
diff -rup wlroots-0.14.0-orig/protocol/meson.build wlroots-0.14.0/protocol/meson.build
--- wlroots-0.14.0-orig/protocol/meson.build	2021-06-23 21:11:00.576321097 +0300
+++ wlroots-0.14.0/protocol/meson.build	2021-06-23 22:04:41.096878541 +0300
@@ -1,4 +1,4 @@
-wayland_protos = dependency('wayland-protocols', version: '>=1.21')
+wayland_protos = dependency('wayland-protocols', version: '>=1.20')
 wl_protocol_dir = wayland_protos.get_variable(pkgconfig: 'pkgdatadir')
 
 wayland_scanner_dep = dependency('wayland-scanner', native: true)
diff -rup wlroots-0.14.0-orig/types/seat/wlr_seat.c wlroots-0.14.0/types/seat/wlr_seat.c
--- wlroots-0.14.0-orig/types/seat/wlr_seat.c	2021-06-23 21:11:00.580321096 +0300
+++ wlroots-0.14.0/types/seat/wlr_seat.c	2021-06-23 22:04:12.005159463 +0300
@@ -20,7 +20,7 @@ static void seat_handle_get_pointer(stru
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_POINTER)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_pointer called when no pointer capability has existed");
 		return;
 	}
@@ -34,7 +34,7 @@ static void seat_handle_get_keyboard(str
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_KEYBOARD)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_keyboard called when no keyboard capability has existed");
 		return;
 	}
@@ -48,7 +48,7 @@ static void seat_handle_get_touch(struct
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_TOUCH)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_touch called when no touch capability has existed");
 		return;
 	}
