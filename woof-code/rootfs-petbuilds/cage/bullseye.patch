diff -rup wlroots-0.14.0-orig/backend/session/session.c wlroots-0.14.0/backend/session/session.c
--- wlroots-0.14.0-orig/backend/session/session.c	2021-06-23 21:11:00.572321099 +0300
+++ wlroots-0.14.0/backend/session/session.c	2021-06-23 22:50:23.217605261 +0300
@@ -337,6 +337,17 @@ bool wlr_session_change_vt(struct wlr_se
 	return libseat_switch_session(session->seat_handle, vt) == 0;
 }
 
+/* https://gitlab.freedesktop.org/mesa/drm/-/blob/5d97031e8aa717c83993fcdaa45b0812ddceb3b0/xf86drmMode.c#L152 */
+drm_public int drmIsKMS(int fd)
+{
+	struct drm_mode_card_res res = {0};
+
+	if (drmIoctl(fd, DRM_IOCTL_MODE_GETRESOURCES, &res) != 0)
+		return 0;
+
+	return res.count_crtcs > 0 && res.count_connectors > 0 && res.count_encoders > 0;
+}
+
 /* Tests if 'path' is KMS compatible by trying to open it. Returns the opened
  * device on success. */
 static struct wlr_device *open_if_kms(struct wlr_session *restrict session,
diff -rup wlroots-0.14.0-orig/meson.build wlroots-0.14.0/meson.build
--- wlroots-0.14.0-orig/meson.build	2021-06-23 21:11:00.576321097 +0300
+++ wlroots-0.14.0/meson.build	2021-06-23 22:04:12.005159463 +0300
@@ -94,9 +94,9 @@ internal_features = {
 	'xcb-errors': false,
 }
 
-wayland_server = dependency('wayland-server', version: '>=1.19')
+wayland_server = dependency('wayland-server', version: '>=1.18')
 wayland_client = dependency('wayland-client')
-drm = dependency('libdrm', version: '>=2.4.105')
+drm = dependency('libdrm', version: '>=2.4.104')
 gbm = dependency('gbm', version: '>=17.1.0')
 libinput = dependency('libinput', version: '>=1.14.0')
 xkbcommon = dependency('xkbcommon')
Only in wlroots-0.14.0: meson.build.orig
diff -rup wlroots-0.14.0-orig/protocol/meson.build wlroots-0.14.0/protocol/meson.build
--- wlroots-0.14.0-orig/protocol/meson.build	2021-06-23 21:11:00.576321097 +0300
+++ wlroots-0.14.0/protocol/meson.build	2021-06-23 22:45:32.266181261 +0300
@@ -1,4 +1,4 @@
-wayland_protos = dependency('wayland-protocols', version: '>=1.21')
+wayland_protos = dependency('wayland-protocols', version: '>=1.20')
 wl_protocol_dir = wayland_protos.get_variable(pkgconfig: 'pkgdatadir')
 
 wayland_scanner_dep = dependency('wayland-scanner', native: true)
@@ -23,7 +23,6 @@ protocols = {
 	'relative-pointer-unstable-v1': wl_protocol_dir / 'unstable/relative-pointer/relative-pointer-unstable-v1.xml',
 	'tablet-unstable-v2': wl_protocol_dir / 'unstable/tablet/tablet-unstable-v2.xml',
 	'text-input-unstable-v3': wl_protocol_dir / 'unstable/text-input/text-input-unstable-v3.xml',
-	'xdg-activation-v1': wl_protocol_dir / 'staging/xdg-activation/xdg-activation-v1.xml',
 	'xdg-decoration-unstable-v1': wl_protocol_dir / 'unstable/xdg-decoration/xdg-decoration-unstable-v1.xml',
 	'xdg-foreign-unstable-v1': wl_protocol_dir / 'unstable/xdg-foreign/xdg-foreign-unstable-v1.xml',
 	'xdg-foreign-unstable-v2': wl_protocol_dir / 'unstable/xdg-foreign/xdg-foreign-unstable-v2.xml',
diff -rup wlroots-0.14.0-orig/types/meson.build wlroots-0.14.0/types/meson.build
--- wlroots-0.14.0-orig/types/meson.build	2021-06-23 21:11:00.580321096 +0300
+++ wlroots-0.14.0/types/meson.build	2021-06-23 22:45:20.862208901 +0300
@@ -62,7 +62,6 @@ wlr_files += files(
 	'wlr_virtual_keyboard_v1.c',
 	'wlr_virtual_pointer_v1.c',
 	'wlr_xcursor_manager.c',
-	'wlr_xdg_activation_v1.c',
 	'wlr_xdg_decoration_v1.c',
 	'wlr_xdg_foreign_v1.c',
 	'wlr_xdg_foreign_v2.c',
diff -rup wlroots-0.14.0-orig/types/seat/wlr_seat.c wlroots-0.14.0/types/seat/wlr_seat.c
--- wlroots-0.14.0-orig/types/seat/wlr_seat.c	2021-06-23 21:11:00.580321096 +0300
+++ wlroots-0.14.0/types/seat/wlr_seat.c	2021-06-23 22:04:12.005159463 +0300
@@ -20,7 +20,7 @@ static void seat_handle_get_pointer(stru
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_POINTER)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_pointer called when no pointer capability has existed");
 		return;
 	}
@@ -34,7 +34,7 @@ static void seat_handle_get_keyboard(str
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_KEYBOARD)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_keyboard called when no keyboard capability has existed");
 		return;
 	}
@@ -48,7 +48,7 @@ static void seat_handle_get_touch(struct
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_TOUCH)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_touch called when no touch capability has existed");
 		return;
 	}
